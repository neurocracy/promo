// -----------------------------------------------------------------------------
//   Content partial
// -----------------------------------------------------------------------------

///
/// Minimum viewport width to display content in two columns.
///
$content-two-column-min-width: 40rem;

///
/// Stacking order (z-index) for home section; later in list is higher.
///
$home-stacking-order: background, background-reveal, content;

#home {
  display: flex;
  flex-direction: column;
  justify-content: center;

  $text-shadow-on-light:  0 0 0.5rem $background-colour-light;
  $text-shadow-on-dark:   0 0 0.5rem $background-colour-dark;

  text-shadow:
    $text-shadow-on-light, $text-shadow-on-light, $text-shadow-on-light;

  @include on-dark-colour-scheme {
    text-shadow:
      $text-shadow-on-dark, $text-shadow-on-dark, $text-shadow-on-dark;
  }

  h1, p {
    // This ensures these are above the background image generated content, so
    // that the text-shadow correctly occludes it.
    position: relative;
    z-index:  index($home-stacking-order, content);

    // This fixes an issue where the hitting the max responsive font size would
    // cause the height of one of these to get larger than the other, which
    // would cause the background to be misaligned.
    height: calc(50vh - #{$viewport-padding * 3} - #{$header-height});

    margin-top:     0;
    margin-bottom:  0;
  }

  h1 {
    display: flex;
    align-items: flex-end;

    padding-bottom: 1.2rem;

    font-size:      250%;

    @media (min-width: 22em) {
      font-size:    275%;
    }

    @media (min-width: 25em) {
      font-size:    300%;
    }

    font-weight:    $font-weight-normal;
    line-height:    1;
    text-transform: uppercase;
  }

  p {
    max-width: 18em;

    padding-top: 0.7rem;
  }

  &::before {
    z-index: index($home-stacking-order, background-reveal);
  }

  &::after {
    z-index: index($home-stacking-order, background);
  }
}

.layout-section__sub-section + .layout-section__sub-section {
  margin-top: 3em;
}

.features-section {
  @media (min-width: $content-two-column-min-width) {
    display: grid;

    grid-template-areas:    "heading      media"
                            "description  media";

    // Reverse the layout every second section. Note that this seems to start at
    // 0 rather than 1, so 0 = odd, 1 = even.
    &:nth-child(odd) {
      grid-template-areas:  "media  heading"
                            "media  description";
    }

    grid-template-columns:  1fr 1fr;
    grid-template-rows:     min-content 1fr;

    grid-gap: 1em;

    @media (min-width: #{$content-two-column-min-width + 10rem}) {
      grid-column-gap: 3em;
    }

    &__media {
      grid-area: media;
    }

    &__heading {
      grid-area: heading;

      @supports (grid-area: heading) {
        margin-top:     -0.15em;
        margin-bottom:  0;

        line-height:    1;
      }
    }

    &__description {
      grid-area: description;

      @supports (grid-area: description) {
        margin-top:     0;
        margin-bottom:  0;
      }
    }
  }

  &__media {
    display: grid;

    grid-template-columns:  1fr;
    grid-template-rows:     1fr;

    // So that links don't end up spanning the full height.
    align-items: start;

    :any-link {
      // This layers both the light and dark links on top of each other so
      // whichever one that's hidden doesn't take up extra space.
      grid-column:  1;
      grid-row:     1;
    }
  }

  // Remove dark mode image links when not in dark mode. Note that we're using
  // visibility so that it can't be focused via keyboard or other means.
  .image-link--dark {
    visibility: hidden;
  }

  // Remove light mode image links in dark mode and show dark mode image links.
  @include on-dark-colour-scheme {
    .image-link--light {
      visibility: hidden;
    }

    .image-link--dark {
      visibility: visible;
    }
  }
}

.play-content {
  @media (min-width: $content-two-column-min-width) {
    display: grid;

    grid-template-columns:  2fr 1fr;

    grid-gap: 1em;

    // Remove the subsequent section top margin if modern grid is supported, as
    // that's only needed on narrow viewports and if modern is not supported.
    @supports (grid-area: omg) {
      .play-section + .play-section {
        margin-top: 0;
      }
    }
  }

  @media (min-width: #{$content-two-column-min-width + 10rem}) {
    grid-column-gap: 3em;
  }
}

.play-link-list {
  // The icons for each list item make the list markers feel redundant, so we
  // remove the markers.
  list-style: none;

  // Padding + negative text indent allow lines after the first to align with
  // start of first line text, rather than the icon.

  html[dir='ltr'] & {
    padding-left: $icon-size + $icon-text-spacing;
  }

  html[dir='rtl'] & {
    padding-right: $icon-size + $icon-text-spacing;
  }

  text-indent: -#{$icon-size + $icon-text-spacing};
}

///
/// Heading level 2 (h2) styles.
///
/// @require {mixin} on-dark-colour-scheme
///
@mixin heading-level2 {
  margin-bottom: 2rem;

  border-bottom: 1px solid hsl(0, 0, 75%);

  @include on-dark-colour-scheme {
    border-bottom-color: hsl(0, 0, 25%);
  }
}

h2 {
  @include heading-level2;

  summary & {
    margin-bottom: 0;
    border-bottom-width: 0;
  }
}

@include headings {
  text-transform: uppercase;
}

ul {
  html[dir='ltr'] & {
    padding-left: 1em;
  }

  html[dir='rtl'] & {
    padding-right: 1em;
  }
}

li + li {
  margin-top: 0.8em;
}

details summary {
  cursor: pointer;

  @include transition-fade-base;

  &:hover, &:focus {
    @include transition-fade-hover;
  }

  &:hover {
    background-color: mix(
      $background-colour-light, $foreground-colour-on-light, 80%
    );

    @include on-dark-colour-scheme {
      background-color: mix(
        $background-colour-dark, $foreground-colour-on-dark, 80%
      );
    }
  }
}

.credits {
  &__label {
    @include heading-level2;

    @include heading-font-size(2);

    // This resets the heading so that we can apply the heading styles just to
    // the <summary>.
    h2 {
      display: inline;

      font-size: 100%;
    }
  }

  &__list {
    // This lays out the credits list as multiple columns when space allows.
    @supports (column-gap: 2em) {
      // The minimum width of columns when displaying as multiple columns.
      //
      // @link https://developer.mozilla.org/en-US/docs/Web/CSS/column-width
      column-width: 20em;
      // The gap between columns. This must be larger than the padding on lists
      // to accomodate the list markers.
      column-gap:   2em;

      li {
        // Don't break to a new column within list items.
        //
        // @see http://stackoverflow.com/a/7785711

        // Chrome and Safari.
        -webkit-column-break-inside: avoid;
        // Firefox 20+.
        page-break-inside: avoid;
        // IE 11.
        break-inside: avoid-column;
      }
    }
  }

  // Give the heading font credit item the heading font family, weight, and
  // uppercase it. Note that we're reducing the font size so it roughly matches
  // the body font size.
  &__list-heading-font {
    font-family:  $heading-font-stack;
    font-weight:  $font-weight-strong;
    font-size:    90%;

    text-transform: uppercase;
  }
}

.press {

  --row-gap:    1em;
  --column-gap: 1em;

  &__item {
    margin: 0;
  }

  // &__item + &__item {
  //   margin-top: var(--row-gap);
  // }

  display: grid;

  column-gap: var(--column-gap);
  row-gap:    var(--row-gap);

  @media (min-width: $content-two-column-min-width) {

    grid-template-columns: 1fr 1fr;

    // // Remove the subsequent section top margin if modern grid is supported, as
    // // that's only needed on narrow viewports and if modern is not supported.
    // @supports (grid-area: omg) {
    //   &__item + &__item {
    //     margin-top: 0;
    //   }
    // }

  }

  @media (min-width: #{$content-two-column-min-width + 10rem}) {
    column-gap: calc(var(--column-gap) * 2);
  }

  blockquote, blockquote p {
    margin: 0;
  }

  blockquote p {
    &::before {
      content: '“';
    }
    &::after {
      content: '”';
    }
  }

  figcaption {
    font-style: italic;
  }

  figcaption::before {
    // Em dash.
    content: '— ';
  }

}
