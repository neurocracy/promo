// -----------------------------------------------------------------------------
//   Background partial
// -----------------------------------------------------------------------------

@use '../variables/animation' as animation-variables;
@use '../helpers/colour' as colour-helpers;
@use '../variables/colours' as colour-variables;

///
/// Home reveal animation keyframes (LTR).
///
@keyframes home-reveal-ltr {
  0% {
    transform: translateX(-25%);
  }
  100% {
    transform: translateX(100%);
  }
}

///
/// Home reveal animation keyframes (RTL).
///
/// Note that this also applies a horizontal flip via scaleX(-1) since setting
/// the transform property to that will get overridden by the animation. As of
/// 2020-10-12, only Firefox supports the separate 'scale' and 'translate'
/// properties.
///
@keyframes home-reveal-rtl {
  0% {
    transform: translateX(25%) scaleX(-1);
  }
  100% {
    transform: translateX(-100%) scaleX(-1);
  }
}

#home {
  position: relative;

  // Background image is applied using generated content to allow applying
  // filters and transforms without affecting the rest of this element's
  // content.
  &::after {
    content: '';

    display: block;

    position: absolute;

    top:    0;
    bottom: 0;
    left:   0;
    right:  0;

    // Tell the Webpack css-loader to not try and resolve this so that we don't
    // end up with the path incorrectly nested. MiniCssExtractPlugin will still
    // resolve this correctly, and as a result, this is still defined as
    // relative to this partial and not the non-partial SCSS or compiled CSS
    // file.
    //
    // @see https://webpack.js.org/loaders/css-loader/#disable-url-resolving-using-the--webpackignore-true--comment
    //
    // @todo Implement proper path resolving in webpack.config.js
    //
    /* webpackIgnore: true */
    background-image:     url('../../images/home.svg?v=2');
    background-repeat:    no-repeat;
    background-position:  0 50%;
    background-size:      contain;

    // The background image doesn't contrast well against the light colour theme
    // background colour, so we reduce the brightness and increase the
    // saturation.
    filter: brightness(65%) saturate(150%);

    // Remove the filters on the dark colour theme.
    @include colour-helpers.on-dark-scheme {
      filter: none;
    }

    // This flips the background horizontally for RTL languages.
    html[dir='rtl'] & {
      transform: scaleX(-1);
    }

    pointer-events: none;
  }

  // This creates a gradient overlay that reveals the home artwork horizontally.
  &::before {
    content: '';

    position: absolute;

    top:    0;
    bottom: 0;
    html[dir='ltr'] & {
      left:   0;
    }
    html[dir='rtl'] & {
      right:  0;
    }

    // This pushes the point in the gradient where it transitions from
    // transparent to the background colour just outside of the content column.
    // This could probably be reworked as a transform?
    width:    150%;

    background-image: linear-gradient(
      to right, transparent, colour-variables.$background-light 25%
    );

    @include colour-helpers.on-dark-scheme {
      background-image: linear-gradient(
        to right, transparent, colour-variables.$background-dark 25%
      );
    }

    animation-duration:         animation-variables.$home-reveal-duration;
    animation-delay:            animation-variables.$home-reveal-delay;
    animation-timing-function:  linear;
    animation-fill-mode:        both;

    html[dir='ltr'] & {
      animation-name:           home-reveal-ltr;
    }
    html[dir='rtl'] & {
      animation-name:           home-reveal-rtl;
    }
  }
}
